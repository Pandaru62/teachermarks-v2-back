generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model user {
  id            Int            @id @default(autoincrement())
  email         String         @unique
  password      String
  role          UserRoleEnum
  createdAt     DateTime       @default(now())
  updatedAt     DateTime?      @updatedAt()
  profile       profile?
  schoolClasses schoolclass[]
  createdSkills skill[]

  @@index([id])
}

model profile {
  userId        Int            @unique
  firstname     String
  lastname      String
  school        String
  createdAt     DateTime       @default(now())
  updatedAt     DateTime?      @updatedAt()
  user          user           @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model form {
  id            Int                             @id @default(autoincrement())
  name          String
  createdAt     DateTime                        @default(now())
  updatedAt     DateTime?                       @updatedAt()
  schoolclass   schoolclass[]
}

model schoolclass {
  id                    Int                     @id @default(autoincrement())
  name                  String
  color                 String
  isArchived            Boolean                 @default(false)
  formId                Int
  createdAt             DateTime                @default(now())
  updatedAt             DateTime?               @updatedAt()
  form                  form                    @relation(fields: [formId], references: [id], onDelete: Cascade)
  students              student[]
  test                  test[]
  teachers              user[]

  @@index([formId])
}

model skill {
  id                  Int                      @id @default(autoincrement())
  name                String
  studenttesthasskill studenttesthasskill[]
  tests               test[]
  createdAt           DateTime                 @default(now())
  updatedAt           DateTime?                @updatedAt()
  userId              Int?
  createdBy           user?                    @relation(fields: [userId], references: [id], onDelete: SetNull)

  @@index([userId])
}

model student {
  id                    Int                     @id @default(autoincrement())
  lastName              String
  firstName             String
  createdAt             DateTime                @default(now())
  updatedAt             DateTime?               @updatedAt()
  schoolClasses         schoolclass[]
  studenttest           studenttest[]
}

model studenttest {
  id                  Int                        @id @default(autoincrement())
  studentId           Int
  testId              Int                 
  mark                Decimal
  createdAt           DateTime                  @default(now())
  updatedAt           DateTime?                 @updatedAt()
  student             student                   @relation(fields: [studentId], references: [id], onDelete: Cascade)
  test                test                      @relation(fields: [testId], references: [id], onDelete: Cascade)
  studenttesthasskill studenttesthasskill[]

  @@unique(name: "studentTestId", [studentId, testId])
  @@index([studentId])
  @@index([testId])
}

model studenttesthasskill {
  // id            Int                             @id @default(autoincrement())
  studentTestId Int
  skillId       Int
  level         LevelEnum
  skill         skill                           @relation(fields: [skillId], references: [id], onDelete: Cascade)
  studenttest   studenttest                     @relation(fields: [studentTestId], references: [id], onDelete: Cascade)

  @@id(name: "studentTestSkillId", [studentTestId, skillId])
  @@index([skillId])
  @@index([studentTestId])
}

model test {
  id            Int             @id @default(autoincrement())
  schoolClassId Int
  date          DateTime
  trimester     TrimesterEnum
  description   String
  scale         Int
  coefficient   Int
  createdAt     DateTime       @default(now())
  updatedAt     DateTime?      @updatedAt()
  studenttest   studenttest[]
  schoolclass   schoolclass    @relation(fields: [schoolClassId], references: [id], onDelete: Cascade)
  skills        skill[]

  @@index([schoolClassId])
}


enum UserRoleEnum {
  ADMIN
  TEACHER
}

enum TrimesterEnum {
  TR1
  TR2
  TR3
}

enum LevelEnum {
  LVL0
  LVL1
  LVL2
  LVL3
  LVL4
  ABS
  NN
}